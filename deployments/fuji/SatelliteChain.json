{
  "address": "0x463d55d6416a7CCa1f7C005a6AC8f0dD70a6f410",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "counters",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "name": "getCounter",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReceiveVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSendVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_dstAddress",
          "type": "bytes"
        }
      ],
      "name": "requestCounter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCounter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_masterChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_confirmations",
          "type": "uint16"
        }
      ],
      "name": "setInboundConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_masterChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_confirmations",
          "type": "uint16"
        }
      ],
      "name": "setOutboundConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_masterAddress",
          "type": "bytes"
        }
      ],
      "name": "setRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x53f67a35a4db24aca65abf42854ffd4cf2ebaa971f2dc7e2e89a36e490a96305",
  "receipt": {
    "to": null,
    "from": "0x3A54802752fEFDc1aF2CD0b6DFA4F24694bDEE33",
    "contractAddress": "0x463d55d6416a7CCa1f7C005a6AC8f0dD70a6f410",
    "transactionIndex": 3,
    "gasUsed": "2282473",
    "logsBloom": "0x
    "blockHash": "0x2205b1c519419f9fbb93b142bc73507f4e4b7f8bcef9a3ddf7c0e2e0a7a70d1c",
    "transactionHash": "0x53f67a35a4db24aca65abf42854ffd4cf2ebaa971f2dc7e2e89a36e490a96305",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 8165279,
        "transactionHash": "0x53f67a35a4db24aca65abf42854ffd4cf2ebaa971f2dc7e2e89a36e490a96305",
        "address": "0x463d55d6416a7CCa1f7C005a6AC8f0dD70a6f410",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a54802752fefdc1af2cd0b6dfa4f24694bdee33"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x2205b1c519419f9fbb93b142bc73507f4e4b7f8bcef9a3ddf7c0e2e0a7a70d1c"
      }
    ],
    "blockNumber": 8165279,
    "cumulativeGasUsed": "2508498",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93f54D755A063cE7bB9e6Ac47Eccc8e33411d706"
  ],
  "numDeployments": 1,
  "solcInputHash": "07cf439af2be6dd17590c667af0273a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"counters\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"name\":\"getCounter\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReceiveVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSendVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_dstAddress\",\"type\":\"bytes\"}],\"name\":\"requestCounter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCounter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_masterChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_confirmations\",\"type\":\"uint16\"}],\"name\":\"setInboundConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_masterChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_confirmations\",\"type\":\"uint16\"}],\"name\":\"setOutboundConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_masterAddress\",\"type\":\"bytes\"}],\"name\":\"setRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SatelliteChain.sol\":\"SatelliteChain\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/SatelliteChain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"./interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"./interfaces/IPOCDeployment.sol\\\";\\r\\n\\r\\ncontract SatelliteChain is\\r\\n    Ownable,\\r\\n    ILayerZeroReceiver,\\r\\n    ILayerZeroUserApplicationConfig\\r\\n{\\r\\n    mapping(uint16 => int256) public counters;\\r\\n    ILayerZeroEndpoint public endpoint;\\r\\n\\r\\n    uint16 masterChainId;\\r\\n    bytes masterAddress;\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        endpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function getCounter(uint16 chainId) public view returns (int256) {\\r\\n        return counters[chainId];\\r\\n    }\\r\\n\\r\\n    function sendCounter() public payable {\\r\\n        bytes memory _params = abi.encode(\\r\\n            \\\"SET\\\",\\r\\n            uint16(0),\\r\\n            bytes(\\\"\\\"),\\r\\n            counters[endpoint.getChainId()]\\r\\n        );\\r\\n        endpoint.send{value: msg.value}(\\r\\n            masterChainId,\\r\\n            masterAddress,\\r\\n            _params,\\r\\n            payable(msg.sender),\\r\\n            address(0x0),\\r\\n            bytes(\\\"\\\")\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function requestCounter(uint16 _chainId, bytes memory _dstAddress)\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        bytes memory _params = abi.encode(\\r\\n            \\\"GET\\\",\\r\\n            _chainId,\\r\\n            _dstAddress,\\r\\n            int256(0)\\r\\n        );\\r\\n        endpoint.send{value: msg.value}(\\r\\n            masterChainId,\\r\\n            masterAddress,\\r\\n            _params,\\r\\n            payable(msg.sender),\\r\\n            address(0x0),\\r\\n            bytes(\\\"\\\")\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // overrides lzReceive function in ILayerZeroReceiver.\\r\\n    // automatically invoked on the receiving chain after the source chain calls endpoint.send(...)\\r\\n    function lzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory _srcAddress,\\r\\n        uint64, /*_nonce*/\\r\\n        bytes memory _payload\\r\\n    ) external override {\\r\\n        require(msg.sender == address(endpoint));\\r\\n        require(\\r\\n            _srcChainId == masterChainId &&\\r\\n                _srcAddress.length == masterAddress.length &&\\r\\n                keccak256(_srcAddress) == keccak256(masterAddress),\\r\\n            \\\"Invalid remote sender address. owner should call setRemote() to enable remote contract\\\"\\r\\n        );\\r\\n        string memory method;\\r\\n        uint16 chainId;\\r\\n        int256 amount;\\r\\n        (method, chainId, amount) = abi.decode(\\r\\n            _payload,\\r\\n            (string, uint16, int256)\\r\\n        );\\r\\n        if (keccak256(bytes(method)) == keccak256(bytes(\\\"SET\\\"))) {\\r\\n            counters[chainId] = amount;\\r\\n        }\\r\\n        sendCounter();\\r\\n    }\\r\\n\\r\\n    function setConfig(\\r\\n        uint16, /*_version*/\\r\\n        uint16 _chainId,\\r\\n        uint256 _configType,\\r\\n        bytes calldata _config\\r\\n    ) external override {\\r\\n        endpoint.setConfig(\\r\\n            endpoint.getSendVersion(address(this)),\\r\\n            _chainId,\\r\\n            _configType,\\r\\n            _config\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getConfig(\\r\\n        uint16, /*_dstChainId*/\\r\\n        uint16 _chainId,\\r\\n        address,\\r\\n        uint256 _configType\\r\\n    ) external view returns (bytes memory) {\\r\\n        return\\r\\n            endpoint.getConfig(\\r\\n                endpoint.getSendVersion(address(this)),\\r\\n                _chainId,\\r\\n                address(this),\\r\\n                _configType\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 version) external override {\\r\\n        endpoint.setSendVersion(version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 version) external override {\\r\\n        endpoint.setReceiveVersion(version);\\r\\n    }\\r\\n\\r\\n    function getSendVersion() external view returns (uint16) {\\r\\n        return endpoint.getSendVersion(address(this));\\r\\n    }\\r\\n\\r\\n    function getReceiveVersion() external view returns (uint16) {\\r\\n        return endpoint.getReceiveVersion(address(this));\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        //\\r\\n    }\\r\\n\\r\\n    // set the Oracle to be used by this UA for LayerZero messages\\r\\n    function setOracle(uint16 dstChainId, address oracle) external {\\r\\n        uint256 TYPE_ORACLE = 6; // from UltraLightNode\\r\\n        // set the Oracle\\r\\n        endpoint.setConfig(\\r\\n            endpoint.getSendVersion(address(this)),\\r\\n            dstChainId,\\r\\n            TYPE_ORACLE,\\r\\n            abi.encode(oracle)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // _chainId - the chainId for the remote contract\\r\\n    // _masterAddress - the contract address on the remote chainId\\r\\n    // the owner must set remote contract addresses.\\r\\n    // in lzReceive(), a require() ensures only messages\\r\\n    // from known contracts can be received.\\r\\n    function setRemote(uint16 _chainId, bytes calldata _masterAddress)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            masterAddress.length == 0,\\r\\n            \\\"The remote address has already been set for the chainId!\\\"\\r\\n        );\\r\\n        masterChainId = _chainId;\\r\\n        masterAddress = _masterAddress;\\r\\n    }\\r\\n\\r\\n    // set the inbound block confirmations\\r\\n    function setInboundConfirmations(\\r\\n        uint16 _masterChainId,\\r\\n        uint16 _confirmations\\r\\n    ) external {\\r\\n        endpoint.setConfig(\\r\\n            endpoint.getSendVersion(address(this)),\\r\\n            _masterChainId,\\r\\n            2, // CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS\\r\\n            abi.encode(_confirmations)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // set outbound block confirmations\\r\\n    function setOutboundConfirmations(\\r\\n        uint16 _masterChainId,\\r\\n        uint16 _confirmations\\r\\n    ) external {\\r\\n        endpoint.setConfig(\\r\\n            endpoint.getSendVersion(address(this)),\\r\\n            _masterChainId,\\r\\n            5, // CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS\\r\\n            abi.encode(_confirmations)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // allow this contract to receive ether\\r\\n    fallback() external payable {}\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xf6d776bfaf8ca54524510c634c7ca2107bdbf2bbdc5ac132068c039bfcad7452\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0x5304d445f73fc334336fb88caa0eec207e238df582485799828fe2b100bd8343\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\",\"keccak256\":\"0x78328d42eeec94e7cda3208849dd835d02bf6ce7005c443be046fe1cbfda81bf\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x3f6707ec8829588ae4eb629ca952b9b019532ce47aa01aad48bcdf9d03c72bac\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPOCDeployment.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IPOCDeployment {\\r\\n    function updateCounter(\\r\\n        uint16 _chainId,\\r\\n        bytes memory _dstAddress,\\r\\n        int256 _amount,\\r\\n        string memory _method\\r\\n    ) external payable;\\r\\n\\r\\n    function sendCounter(\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _dstAddress,\\r\\n        uint16 _srcChainId\\r\\n    ) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0x6b270731b9dea9926a503221bc58a9fbbaa49f2d932370ab0cba19fed49cdea2\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200297e3803806200297e833981810160405281019062000037919062000182565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001fc565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c81620001e2565b92915050565b6000602082840312156200019557600080fd5b6000620001a5848285016200016b565b91505092915050565b6000620001bb82620001c2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001ed81620001ae565b8114620001f957600080fd5b50565b612772806200020c6000396000f3fe6080604052600436106101225760003560e01c80636df65371116100a0578063cbed8b9c11610064578063cbed8b9c1461036e578063cf5d147114610397578063e6362ce8146103c2578063f2fde38b146103ff578063f5ecbdbc1461042857610129565b80636df65371146102aa578063715018a6146102d35780638da5cb5b146102ea578063a31a9a8014610315578063be872e2a1461035257610129565b80632b2257dc116100e75780632b2257dc146101d957806342d65a8d14610202578063492e527e1461022b57806354a5beda146102545780635e280f111461027f57610129565b80621d35671461012b57806307e0db171461015457806310ddb1371461017d5780631c642f2c146101a657806320cdd0a1146101b057610129565b3661012957005b005b34801561013757600080fd5b50610152600480360381019061014d9190611a7c565b610465565b005b34801561016057600080fd5b5061017b60048036038101906101769190611942565b6105fd565b005b34801561018957600080fd5b506101a4600480360381019061019f9190611942565b61068d565b005b6101ae61071d565b005b3480156101bc57600080fd5b506101d760048036038101906101d291906119d0565b6108ca565b005b3480156101e557600080fd5b5061020060048036038101906101fb9190611b0f565b6109cb565b005b34801561020e57600080fd5b50610229600480360381019061022491906119d0565b610b2c565b005b34801561023757600080fd5b50610252600480360381019061024d9190611994565b610b31565b005b34801561026057600080fd5b50610269610c98565b6040516102769190612089565b60405180910390f35b34801561028b57600080fd5b50610294610d4a565b6040516102a19190611f31565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc9190611b0f565b610d70565b005b3480156102df57600080fd5b506102e8610ed1565b005b3480156102f657600080fd5b506102ff610f59565b60405161030c9190611ef4565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190611942565b610f82565b6040516103499190611f4c565b60405180910390f35b61036c60048036038101906103679190611a28565b610f9a565b005b34801561037a57600080fd5b5061039560048036038101906103909190611bae565b611081565b005b3480156103a357600080fd5b506103ac6111c7565b6040516103b99190612089565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190611942565b611279565b6040516103f69190611f4c565b60405180910390f35b34801561040b57600080fd5b5061042660048036038101906104219190611871565b61129e565b005b34801561043457600080fd5b5061044f600480360381019061044a9190611b4b565b611396565b60405161045c9190611f0f565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104bf57600080fd5b600260149054906101000a900461ffff1661ffff168461ffff161480156104f45750600380546104ee90612469565b90508351145b801561051c5750600360405161050a9190611edd565b60405180910390208380519060200120145b61055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055290611f87565b60405180910390fd5b60606000808380602001905181019061057491906118db565b8093508194508295505050506040518060400160405280600381526020017f534554000000000000000000000000000000000000000000000000000000000081525080519060200120838051906020012014156105ec5780600160008461ffff1661ffff168152602001908152602001600020819055505b6105f461071d565b50505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b81526004016106589190612089565b600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b81526004016106e89190612089565b600060405180830381600087803b15801561070257600080fd5b505af1158015610716573d6000803e3d6000fd5b5050505050565b6000806040518060200160405280600081525060016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633408e4706040518163ffffffff1660e01b815260040160206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d4919061196b565b61ffff1661ffff168152602001908152602001600020546040516020016107fd93929190611fa7565b6040516020818303038152906040529050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c580310034600260149054906101000a900461ffff16600385336000604051806020016040528060008152506040518863ffffffff1660e01b8152600401610895969594939291906120a4565b6000604051808303818588803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050505050565b6108d2611502565b73ffffffffffffffffffffffffffffffffffffffff166108f0610f59565b73ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d90612049565b60405180910390fd5b60006003805461095590612469565b905014610997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098e90612069565b60405180910390fd5b82600260146101000a81548161ffff021916908361ffff1602179055508181600391906109c59291906115ce565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610a649190611ef4565b60206040518083038186803b158015610a7c57600080fd5b505afa158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab4919061196b565b84600585604051602001610ac89190612089565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610af694939291906121ab565b600060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050505050565b505050565b600060069050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610bd09190611ef4565b60206040518083038186803b158015610be857600080fd5b505afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c20919061196b565b858486604051602001610c339190611ef4565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610c619493929190612245565b600060405180830381600087803b158015610c7b57600080fd5b505af1158015610c8f573d6000803e3d6000fd5b50505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610cf59190611ef4565b60206040518083038186803b158015610d0d57600080fd5b505afa158015610d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d45919061196b565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610e099190611ef4565b60206040518083038186803b158015610e2157600080fd5b505afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e59919061196b565b84600285604051602001610e6d9190612089565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610e9b949392919061215f565b600060405180830381600087803b158015610eb557600080fd5b505af1158015610ec9573d6000803e3d6000fd5b505050505050565b610ed9611502565b73ffffffffffffffffffffffffffffffffffffffff16610ef7610f59565b73ffffffffffffffffffffffffffffffffffffffff1614610f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4490612049565b60405180910390fd5b610f57600061150a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915090505481565b600082826000604051602001610fb293929190611ff8565b6040516020818303038152906040529050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c580310034600260149054906101000a900461ffff16600385336000604051806020016040528060008152506040518863ffffffff1660e01b815260040161104a969594939291906120a4565b6000604051808303818588803b15801561106357600080fd5b505af1158015611077573d6000803e3d6000fd5b5050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b815260040161111a9190611ef4565b60206040518083038186803b15801561113257600080fd5b505afa158015611146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116a919061196b565b868686866040518663ffffffff1660e01b815260040161118e9594939291906121f7565b600060405180830381600087803b1580156111a857600080fd5b505af11580156111bc573d6000803e3d6000fd5b505050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da1a7c9a306040518263ffffffff1660e01b81526004016112249190611ef4565b60206040518083038186803b15801561123c57600080fd5b505afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611274919061196b565b905090565b6000600160008361ffff1661ffff168152602001908152602001600020549050919050565b6112a6611502565b73ffffffffffffffffffffffffffffffffffffffff166112c4610f59565b73ffffffffffffffffffffffffffffffffffffffff161461131a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131190612049565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138190611f67565b60405180910390fd5b6113938161150a565b50565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b81526004016114319190611ef4565b60206040518083038186803b15801561144957600080fd5b505afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611481919061196b565b8630866040518563ffffffff1660e01b81526004016114a3949392919061211a565b60006040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114f8919061189a565b9050949350505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546115da90612469565b90600052602060002090601f0160209004810192826115fc5760008555611643565b82601f1061161557803560ff1916838001178555611643565b82800160010185558215611643579182015b82811115611642578235825591602001919060010190611627565b5b5090506116509190611654565b5090565b5b8082111561166d576000816000905550600101611655565b5090565b600061168461167f846122b6565b612291565b90508281526020810184848401111561169c57600080fd5b6116a7848285612427565b509392505050565b60006116c26116bd846122b6565b612291565b9050828152602081018484840111156116da57600080fd5b6116e5848285612436565b509392505050565b60006117006116fb846122e7565b612291565b90508281526020810184848401111561171857600080fd5b611723848285612436565b509392505050565b60008135905061173a816126c9565b92915050565b60008083601f84011261175257600080fd5b8235905067ffffffffffffffff81111561176b57600080fd5b60208301915083600182028301111561178357600080fd5b9250929050565b600082601f83011261179b57600080fd5b81356117ab848260208601611671565b91505092915050565b600082601f8301126117c557600080fd5b81516117d58482602086016116af565b91505092915050565b6000815190506117ed816126e0565b92915050565b600082601f83011261180457600080fd5b81516118148482602086016116ed565b91505092915050565b60008135905061182c816126f7565b92915050565b600081519050611841816126f7565b92915050565b6000813590506118568161270e565b92915050565b60008135905061186b81612725565b92915050565b60006020828403121561188357600080fd5b60006118918482850161172b565b91505092915050565b6000602082840312156118ac57600080fd5b600082015167ffffffffffffffff8111156118c657600080fd5b6118d2848285016117b4565b91505092915050565b6000806000606084860312156118f057600080fd5b600084015167ffffffffffffffff81111561190a57600080fd5b611916868287016117f3565b935050602061192786828701611832565b9250506040611938868287016117de565b9150509250925092565b60006020828403121561195457600080fd5b60006119628482850161181d565b91505092915050565b60006020828403121561197d57600080fd5b600061198b84828501611832565b91505092915050565b600080604083850312156119a757600080fd5b60006119b58582860161181d565b92505060206119c68582860161172b565b9150509250929050565b6000806000604084860312156119e557600080fd5b60006119f38682870161181d565b935050602084013567ffffffffffffffff811115611a1057600080fd5b611a1c86828701611740565b92509250509250925092565b60008060408385031215611a3b57600080fd5b6000611a498582860161181d565b925050602083013567ffffffffffffffff811115611a6657600080fd5b611a728582860161178a565b9150509250929050565b60008060008060808587031215611a9257600080fd5b6000611aa08782880161181d565b945050602085013567ffffffffffffffff811115611abd57600080fd5b611ac98782880161178a565b9350506040611ada8782880161185c565b925050606085013567ffffffffffffffff811115611af757600080fd5b611b038782880161178a565b91505092959194509250565b60008060408385031215611b2257600080fd5b6000611b308582860161181d565b9250506020611b418582860161181d565b9150509250929050565b60008060008060808587031215611b6157600080fd5b6000611b6f8782880161181d565b9450506020611b808782880161181d565b9350506040611b918782880161172b565b9250506060611ba287828801611847565b91505092959194509250565b600080600080600060808688031215611bc657600080fd5b6000611bd48882890161181d565b9550506020611be58882890161181d565b9450506040611bf688828901611847565b935050606086013567ffffffffffffffff811115611c1357600080fd5b611c1f88828901611740565b92509250509295509295909350565b611c3781612377565b82525050565b611c4681612365565b82525050565b6000611c588385612338565b9350611c65838584612427565b611c6e8361252a565b840190509392505050565b6000611c848261232d565b611c8e8185612338565b9350611c9e818560208601612436565b611ca78161252a565b840191505092915050565b60008154611cbf81612469565b611cc98186612338565b94506001821660008114611ce45760018114611cf657611d29565b60ff1983168652602086019350611d29565b611cff85612318565b60005b83811015611d2157815481890152600182019150602081019050611d02565b808801955050505b50505092915050565b60008154611d3f81612469565b611d498186612349565b94506001821660008114611d645760018114611d7557611da8565b60ff19831686528186019350611da8565b611d7e85612318565b60005b83811015611da057815481890152600182019150602081019050611d81565b838801955050505b50505092915050565b611dba816123df565b82525050565b611dc981612389565b82525050565b611dd881612403565b82525050565b611de781612415565b82525050565b6000611dfa602683612354565b9150611e058261253b565b604082019050919050565b6000611e1d605683612354565b9150611e288261258a565b606082019050919050565b6000611e40600383612354565b9150611e4b826125ff565b602082019050919050565b6000611e63600383612354565b9150611e6e82612628565b602082019050919050565b6000611e86602083612354565b9150611e9182612651565b602082019050919050565b6000611ea9603883612354565b9150611eb48261267a565b604082019050919050565b611ec881612393565b82525050565b611ed7816123c1565b82525050565b6000611ee98284611d32565b915081905092915050565b6000602082019050611f096000830184611c3d565b92915050565b60006020820190508181036000830152611f298184611c79565b905092915050565b6000602082019050611f466000830184611db1565b92915050565b6000602082019050611f616000830184611dc0565b92915050565b60006020820190508181036000830152611f8081611ded565b9050919050565b60006020820190508181036000830152611fa081611e10565b9050919050565b60006080820190508181036000830152611fc081611e33565b9050611fcf6020830186611ebf565b8181036040830152611fe18185611c79565b9050611ff06060830184611dc0565b949350505050565b6000608082019050818103600083015261201181611e56565b90506120206020830186611ebf565b81810360408301526120328185611c79565b90506120416060830184611dc0565b949350505050565b6000602082019050818103600083015261206281611e79565b9050919050565b6000602082019050818103600083015261208281611e9c565b9050919050565b600060208201905061209e6000830184611ebf565b92915050565b600060c0820190506120b96000830189611ebf565b81810360208301526120cb8188611cb2565b905081810360408301526120df8187611c79565b90506120ee6060830186611c2e565b6120fb6080830185611c3d565b81810360a083015261210d8184611c79565b9050979650505050505050565b600060808201905061212f6000830187611ebf565b61213c6020830186611ebf565b6121496040830185611c3d565b6121566060830184611ece565b95945050505050565b60006080820190506121746000830187611ebf565b6121816020830186611ebf565b61218e6040830185611dcf565b81810360608301526121a08184611c79565b905095945050505050565b60006080820190506121c06000830187611ebf565b6121cd6020830186611ebf565b6121da6040830185611dde565b81810360608301526121ec8184611c79565b905095945050505050565b600060808201905061220c6000830188611ebf565b6122196020830187611ebf565b6122266040830186611ece565b8181036060830152612239818486611c4c565b90509695505050505050565b600060808201905061225a6000830187611ebf565b6122676020830186611ebf565b6122746040830185611ece565b81810360608301526122868184611c79565b905095945050505050565b600061229b6122ac565b90506122a7828261249b565b919050565b6000604051905090565b600067ffffffffffffffff8211156122d1576122d06124fb565b5b6122da8261252a565b9050602081019050919050565b600067ffffffffffffffff821115612302576123016124fb565b5b61230b8261252a565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612370826123a1565b9050919050565b6000612382826123a1565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006123ea826123f1565b9050919050565b60006123fc826123a1565b9050919050565b600061240e826123c1565b9050919050565b6000612420826123c1565b9050919050565b82818337600083830152505050565b60005b83811015612454578082015181840152602081019050612439565b83811115612463576000848401525b50505050565b6000600282049050600182168061248157607f821691505b60208210811415612495576124946124cc565b5b50919050565b6124a48261252a565b810181811067ffffffffffffffff821117156124c3576124c26124fb565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c69642072656d6f74652073656e64657220616464726573732e206f60008201527f776e65722073686f756c642063616c6c2073657452656d6f7465282920746f2060208201527f656e61626c652072656d6f746520636f6e747261637400000000000000000000604082015250565b7f5345540000000000000000000000000000000000000000000000000000000000600082015250565b7f4745540000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5468652072656d6f746520616464726573732068617320616c7265616479206260008201527f65656e2073657420666f722074686520636861696e4964210000000000000000602082015250565b6126d281612365565b81146126dd57600080fd5b50565b6126e981612389565b81146126f457600080fd5b50565b61270081612393565b811461270b57600080fd5b50565b612717816123c1565b811461272257600080fd5b50565b61272e816123cb565b811461273957600080fd5b5056fea2646970667358221220a099d6983f409afdc314c9728721f613afde7ac1afb44c1ba1083887099028f464736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101225760003560e01c80636df65371116100a0578063cbed8b9c11610064578063cbed8b9c1461036e578063cf5d147114610397578063e6362ce8146103c2578063f2fde38b146103ff578063f5ecbdbc1461042857610129565b80636df65371146102aa578063715018a6146102d35780638da5cb5b146102ea578063a31a9a8014610315578063be872e2a1461035257610129565b80632b2257dc116100e75780632b2257dc146101d957806342d65a8d14610202578063492e527e1461022b57806354a5beda146102545780635e280f111461027f57610129565b80621d35671461012b57806307e0db171461015457806310ddb1371461017d5780631c642f2c146101a657806320cdd0a1146101b057610129565b3661012957005b005b34801561013757600080fd5b50610152600480360381019061014d9190611a7c565b610465565b005b34801561016057600080fd5b5061017b60048036038101906101769190611942565b6105fd565b005b34801561018957600080fd5b506101a4600480360381019061019f9190611942565b61068d565b005b6101ae61071d565b005b3480156101bc57600080fd5b506101d760048036038101906101d291906119d0565b6108ca565b005b3480156101e557600080fd5b5061020060048036038101906101fb9190611b0f565b6109cb565b005b34801561020e57600080fd5b50610229600480360381019061022491906119d0565b610b2c565b005b34801561023757600080fd5b50610252600480360381019061024d9190611994565b610b31565b005b34801561026057600080fd5b50610269610c98565b6040516102769190612089565b60405180910390f35b34801561028b57600080fd5b50610294610d4a565b6040516102a19190611f31565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc9190611b0f565b610d70565b005b3480156102df57600080fd5b506102e8610ed1565b005b3480156102f657600080fd5b506102ff610f59565b60405161030c9190611ef4565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190611942565b610f82565b6040516103499190611f4c565b60405180910390f35b61036c60048036038101906103679190611a28565b610f9a565b005b34801561037a57600080fd5b5061039560048036038101906103909190611bae565b611081565b005b3480156103a357600080fd5b506103ac6111c7565b6040516103b99190612089565b60405180910390f35b3480156103ce57600080fd5b506103e960048036038101906103e49190611942565b611279565b6040516103f69190611f4c565b60405180910390f35b34801561040b57600080fd5b5061042660048036038101906104219190611871565b61129e565b005b34801561043457600080fd5b5061044f600480360381019061044a9190611b4b565b611396565b60405161045c9190611f0f565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104bf57600080fd5b600260149054906101000a900461ffff1661ffff168461ffff161480156104f45750600380546104ee90612469565b90508351145b801561051c5750600360405161050a9190611edd565b60405180910390208380519060200120145b61055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055290611f87565b60405180910390fd5b60606000808380602001905181019061057491906118db565b8093508194508295505050506040518060400160405280600381526020017f534554000000000000000000000000000000000000000000000000000000000081525080519060200120838051906020012014156105ec5780600160008461ffff1661ffff168152602001908152602001600020819055505b6105f461071d565b50505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b81526004016106589190612089565b600060405180830381600087803b15801561067257600080fd5b505af1158015610686573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b81526004016106e89190612089565b600060405180830381600087803b15801561070257600080fd5b505af1158015610716573d6000803e3d6000fd5b5050505050565b6000806040518060200160405280600081525060016000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633408e4706040518163ffffffff1660e01b815260040160206040518083038186803b15801561079c57600080fd5b505afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d4919061196b565b61ffff1661ffff168152602001908152602001600020546040516020016107fd93929190611fa7565b6040516020818303038152906040529050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c580310034600260149054906101000a900461ffff16600385336000604051806020016040528060008152506040518863ffffffff1660e01b8152600401610895969594939291906120a4565b6000604051808303818588803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b505050505050565b6108d2611502565b73ffffffffffffffffffffffffffffffffffffffff166108f0610f59565b73ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d90612049565b60405180910390fd5b60006003805461095590612469565b905014610997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098e90612069565b60405180910390fd5b82600260146101000a81548161ffff021916908361ffff1602179055508181600391906109c59291906115ce565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610a649190611ef4565b60206040518083038186803b158015610a7c57600080fd5b505afa158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab4919061196b565b84600585604051602001610ac89190612089565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610af694939291906121ab565b600060405180830381600087803b158015610b1057600080fd5b505af1158015610b24573d6000803e3d6000fd5b505050505050565b505050565b600060069050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610bd09190611ef4565b60206040518083038186803b158015610be857600080fd5b505afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c20919061196b565b858486604051602001610c339190611ef4565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610c619493929190612245565b600060405180830381600087803b158015610c7b57600080fd5b505af1158015610c8f573d6000803e3d6000fd5b50505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610cf59190611ef4565b60206040518083038186803b158015610d0d57600080fd5b505afa158015610d21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d45919061196b565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b8152600401610e099190611ef4565b60206040518083038186803b158015610e2157600080fd5b505afa158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e59919061196b565b84600285604051602001610e6d9190612089565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610e9b949392919061215f565b600060405180830381600087803b158015610eb557600080fd5b505af1158015610ec9573d6000803e3d6000fd5b505050505050565b610ed9611502565b73ffffffffffffffffffffffffffffffffffffffff16610ef7610f59565b73ffffffffffffffffffffffffffffffffffffffff1614610f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4490612049565b60405180910390fd5b610f57600061150a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528060005260406000206000915090505481565b600082826000604051602001610fb293929190611ff8565b6040516020818303038152906040529050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c580310034600260149054906101000a900461ffff16600385336000604051806020016040528060008152506040518863ffffffff1660e01b815260040161104a969594939291906120a4565b6000604051808303818588803b15801561106357600080fd5b505af1158015611077573d6000803e3d6000fd5b5050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b815260040161111a9190611ef4565b60206040518083038186803b15801561113257600080fd5b505afa158015611146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116a919061196b565b868686866040518663ffffffff1660e01b815260040161118e9594939291906121f7565b600060405180830381600087803b1580156111a857600080fd5b505af11580156111bc573d6000803e3d6000fd5b505050505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663da1a7c9a306040518263ffffffff1660e01b81526004016112249190611ef4565b60206040518083038186803b15801561123c57600080fd5b505afa158015611250573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611274919061196b565b905090565b6000600160008361ffff1661ffff168152602001908152602001600020549050919050565b6112a6611502565b73ffffffffffffffffffffffffffffffffffffffff166112c4610f59565b73ffffffffffffffffffffffffffffffffffffffff161461131a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131190612049565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561138a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138190611f67565b60405180910390fd5b6113938161150a565b50565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663096568f6306040518263ffffffff1660e01b81526004016114319190611ef4565b60206040518083038186803b15801561144957600080fd5b505afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611481919061196b565b8630866040518563ffffffff1660e01b81526004016114a3949392919061211a565b60006040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114f8919061189a565b9050949350505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546115da90612469565b90600052602060002090601f0160209004810192826115fc5760008555611643565b82601f1061161557803560ff1916838001178555611643565b82800160010185558215611643579182015b82811115611642578235825591602001919060010190611627565b5b5090506116509190611654565b5090565b5b8082111561166d576000816000905550600101611655565b5090565b600061168461167f846122b6565b612291565b90508281526020810184848401111561169c57600080fd5b6116a7848285612427565b509392505050565b60006116c26116bd846122b6565b612291565b9050828152602081018484840111156116da57600080fd5b6116e5848285612436565b509392505050565b60006117006116fb846122e7565b612291565b90508281526020810184848401111561171857600080fd5b611723848285612436565b509392505050565b60008135905061173a816126c9565b92915050565b60008083601f84011261175257600080fd5b8235905067ffffffffffffffff81111561176b57600080fd5b60208301915083600182028301111561178357600080fd5b9250929050565b600082601f83011261179b57600080fd5b81356117ab848260208601611671565b91505092915050565b600082601f8301126117c557600080fd5b81516117d58482602086016116af565b91505092915050565b6000815190506117ed816126e0565b92915050565b600082601f83011261180457600080fd5b81516118148482602086016116ed565b91505092915050565b60008135905061182c816126f7565b92915050565b600081519050611841816126f7565b92915050565b6000813590506118568161270e565b92915050565b60008135905061186b81612725565b92915050565b60006020828403121561188357600080fd5b60006118918482850161172b565b91505092915050565b6000602082840312156118ac57600080fd5b600082015167ffffffffffffffff8111156118c657600080fd5b6118d2848285016117b4565b91505092915050565b6000806000606084860312156118f057600080fd5b600084015167ffffffffffffffff81111561190a57600080fd5b611916868287016117f3565b935050602061192786828701611832565b9250506040611938868287016117de565b9150509250925092565b60006020828403121561195457600080fd5b60006119628482850161181d565b91505092915050565b60006020828403121561197d57600080fd5b600061198b84828501611832565b91505092915050565b600080604083850312156119a757600080fd5b60006119b58582860161181d565b92505060206119c68582860161172b565b9150509250929050565b6000806000604084860312156119e557600080fd5b60006119f38682870161181d565b935050602084013567ffffffffffffffff811115611a1057600080fd5b611a1c86828701611740565b92509250509250925092565b60008060408385031215611a3b57600080fd5b6000611a498582860161181d565b925050602083013567ffffffffffffffff811115611a6657600080fd5b611a728582860161178a565b9150509250929050565b60008060008060808587031215611a9257600080fd5b6000611aa08782880161181d565b945050602085013567ffffffffffffffff811115611abd57600080fd5b611ac98782880161178a565b9350506040611ada8782880161185c565b925050606085013567ffffffffffffffff811115611af757600080fd5b611b038782880161178a565b91505092959194509250565b60008060408385031215611b2257600080fd5b6000611b308582860161181d565b9250506020611b418582860161181d565b9150509250929050565b60008060008060808587031215611b6157600080fd5b6000611b6f8782880161181d565b9450506020611b808782880161181d565b9350506040611b918782880161172b565b9250506060611ba287828801611847565b91505092959194509250565b600080600080600060808688031215611bc657600080fd5b6000611bd48882890161181d565b9550506020611be58882890161181d565b9450506040611bf688828901611847565b935050606086013567ffffffffffffffff811115611c1357600080fd5b611c1f88828901611740565b92509250509295509295909350565b611c3781612377565b82525050565b611c4681612365565b82525050565b6000611c588385612338565b9350611c65838584612427565b611c6e8361252a565b840190509392505050565b6000611c848261232d565b611c8e8185612338565b9350611c9e818560208601612436565b611ca78161252a565b840191505092915050565b60008154611cbf81612469565b611cc98186612338565b94506001821660008114611ce45760018114611cf657611d29565b60ff1983168652602086019350611d29565b611cff85612318565b60005b83811015611d2157815481890152600182019150602081019050611d02565b808801955050505b50505092915050565b60008154611d3f81612469565b611d498186612349565b94506001821660008114611d645760018114611d7557611da8565b60ff19831686528186019350611da8565b611d7e85612318565b60005b83811015611da057815481890152600182019150602081019050611d81565b838801955050505b50505092915050565b611dba816123df565b82525050565b611dc981612389565b82525050565b611dd881612403565b82525050565b611de781612415565b82525050565b6000611dfa602683612354565b9150611e058261253b565b604082019050919050565b6000611e1d605683612354565b9150611e288261258a565b606082019050919050565b6000611e40600383612354565b9150611e4b826125ff565b602082019050919050565b6000611e63600383612354565b9150611e6e82612628565b602082019050919050565b6000611e86602083612354565b9150611e9182612651565b602082019050919050565b6000611ea9603883612354565b9150611eb48261267a565b604082019050919050565b611ec881612393565b82525050565b611ed7816123c1565b82525050565b6000611ee98284611d32565b915081905092915050565b6000602082019050611f096000830184611c3d565b92915050565b60006020820190508181036000830152611f298184611c79565b905092915050565b6000602082019050611f466000830184611db1565b92915050565b6000602082019050611f616000830184611dc0565b92915050565b60006020820190508181036000830152611f8081611ded565b9050919050565b60006020820190508181036000830152611fa081611e10565b9050919050565b60006080820190508181036000830152611fc081611e33565b9050611fcf6020830186611ebf565b8181036040830152611fe18185611c79565b9050611ff06060830184611dc0565b949350505050565b6000608082019050818103600083015261201181611e56565b90506120206020830186611ebf565b81810360408301526120328185611c79565b90506120416060830184611dc0565b949350505050565b6000602082019050818103600083015261206281611e79565b9050919050565b6000602082019050818103600083015261208281611e9c565b9050919050565b600060208201905061209e6000830184611ebf565b92915050565b600060c0820190506120b96000830189611ebf565b81810360208301526120cb8188611cb2565b905081810360408301526120df8187611c79565b90506120ee6060830186611c2e565b6120fb6080830185611c3d565b81810360a083015261210d8184611c79565b9050979650505050505050565b600060808201905061212f6000830187611ebf565b61213c6020830186611ebf565b6121496040830185611c3d565b6121566060830184611ece565b95945050505050565b60006080820190506121746000830187611ebf565b6121816020830186611ebf565b61218e6040830185611dcf565b81810360608301526121a08184611c79565b905095945050505050565b60006080820190506121c06000830187611ebf565b6121cd6020830186611ebf565b6121da6040830185611dde565b81810360608301526121ec8184611c79565b905095945050505050565b600060808201905061220c6000830188611ebf565b6122196020830187611ebf565b6122266040830186611ece565b8181036060830152612239818486611c4c565b90509695505050505050565b600060808201905061225a6000830187611ebf565b6122676020830186611ebf565b6122746040830185611ece565b81810360608301526122868184611c79565b905095945050505050565b600061229b6122ac565b90506122a7828261249b565b919050565b6000604051905090565b600067ffffffffffffffff8211156122d1576122d06124fb565b5b6122da8261252a565b9050602081019050919050565b600067ffffffffffffffff821115612302576123016124fb565b5b61230b8261252a565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612370826123a1565b9050919050565b6000612382826123a1565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006123ea826123f1565b9050919050565b60006123fc826123a1565b9050919050565b600061240e826123c1565b9050919050565b6000612420826123c1565b9050919050565b82818337600083830152505050565b60005b83811015612454578082015181840152602081019050612439565b83811115612463576000848401525b50505050565b6000600282049050600182168061248157607f821691505b60208210811415612495576124946124cc565b5b50919050565b6124a48261252a565b810181811067ffffffffffffffff821117156124c3576124c26124fb565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c69642072656d6f74652073656e64657220616464726573732e206f60008201527f776e65722073686f756c642063616c6c2073657452656d6f7465282920746f2060208201527f656e61626c652072656d6f746520636f6e747261637400000000000000000000604082015250565b7f5345540000000000000000000000000000000000000000000000000000000000600082015250565b7f4745540000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5468652072656d6f746520616464726573732068617320616c7265616479206260008201527f65656e2073657420666f722074686520636861696e4964210000000000000000602082015250565b6126d281612365565b81146126dd57600080fd5b50565b6126e981612389565b81146126f457600080fd5b50565b61270081612393565b811461270b57600080fd5b50565b612717816123c1565b811461272257600080fd5b50565b61272e816123cb565b811461273957600080fd5b5056fea2646970667358221220a099d6983f409afdc314c9728721f613afde7ac1afb44c1ba1083887099028f464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SatelliteChain.sol:SatelliteChain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1528,
        "contract": "contracts/SatelliteChain.sol:SatelliteChain",
        "label": "counters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_int256)"
      },
      {
        "astId": 1531,
        "contract": "contracts/SatelliteChain.sol:SatelliteChain",
        "label": "endpoint",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILayerZeroEndpoint)2130"
      },
      {
        "astId": 1533,
        "contract": "contracts/SatelliteChain.sol:SatelliteChain",
        "label": "masterChainId",
        "offset": 20,
        "slot": "2",
        "type": "t_uint16"
      },
      {
        "astId": 1535,
        "contract": "contracts/SatelliteChain.sol:SatelliteChain",
        "label": "masterAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ILayerZeroEndpoint)2130": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint16,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}