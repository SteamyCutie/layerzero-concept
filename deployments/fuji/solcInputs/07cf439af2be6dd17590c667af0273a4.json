{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}\r\n"
    },
    "contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}\r\n"
    },
    "contracts/SatelliteChain.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./interfaces/ILayerZeroReceiver.sol\";\r\nimport \"./interfaces/ILayerZeroEndpoint.sol\";\r\nimport \"./interfaces/ILayerZeroUserApplicationConfig.sol\";\r\nimport \"./interfaces/IPOCDeployment.sol\";\r\n\r\ncontract SatelliteChain is\r\n    Ownable,\r\n    ILayerZeroReceiver,\r\n    ILayerZeroUserApplicationConfig\r\n{\r\n    mapping(uint16 => int256) public counters;\r\n    ILayerZeroEndpoint public endpoint;\r\n\r\n    uint16 masterChainId;\r\n    bytes masterAddress;\r\n\r\n    constructor(address _endpoint) {\r\n        endpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function getCounter(uint16 chainId) public view returns (int256) {\r\n        return counters[chainId];\r\n    }\r\n\r\n    function sendCounter() public payable {\r\n        bytes memory _params = abi.encode(\r\n            \"SET\",\r\n            uint16(0),\r\n            bytes(\"\"),\r\n            counters[endpoint.getChainId()]\r\n        );\r\n        endpoint.send{value: msg.value}(\r\n            masterChainId,\r\n            masterAddress,\r\n            _params,\r\n            payable(msg.sender),\r\n            address(0x0),\r\n            bytes(\"\")\r\n        );\r\n    }\r\n\r\n    function requestCounter(uint16 _chainId, bytes memory _dstAddress)\r\n        external\r\n        payable\r\n    {\r\n        bytes memory _params = abi.encode(\r\n            \"GET\",\r\n            _chainId,\r\n            _dstAddress,\r\n            int256(0)\r\n        );\r\n        endpoint.send{value: msg.value}(\r\n            masterChainId,\r\n            masterAddress,\r\n            _params,\r\n            payable(msg.sender),\r\n            address(0x0),\r\n            bytes(\"\")\r\n        );\r\n    }\r\n\r\n    // overrides lzReceive function in ILayerZeroReceiver.\r\n    // automatically invoked on the receiving chain after the source chain calls endpoint.send(...)\r\n    function lzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64, /*_nonce*/\r\n        bytes memory _payload\r\n    ) external override {\r\n        require(msg.sender == address(endpoint));\r\n        require(\r\n            _srcChainId == masterChainId &&\r\n                _srcAddress.length == masterAddress.length &&\r\n                keccak256(_srcAddress) == keccak256(masterAddress),\r\n            \"Invalid remote sender address. owner should call setRemote() to enable remote contract\"\r\n        );\r\n        string memory method;\r\n        uint16 chainId;\r\n        int256 amount;\r\n        (method, chainId, amount) = abi.decode(\r\n            _payload,\r\n            (string, uint16, int256)\r\n        );\r\n        if (keccak256(bytes(method)) == keccak256(bytes(\"SET\"))) {\r\n            counters[chainId] = amount;\r\n        }\r\n        sendCounter();\r\n    }\r\n\r\n    function setConfig(\r\n        uint16, /*_version*/\r\n        uint16 _chainId,\r\n        uint256 _configType,\r\n        bytes calldata _config\r\n    ) external override {\r\n        endpoint.setConfig(\r\n            endpoint.getSendVersion(address(this)),\r\n            _chainId,\r\n            _configType,\r\n            _config\r\n        );\r\n    }\r\n\r\n    function getConfig(\r\n        uint16, /*_dstChainId*/\r\n        uint16 _chainId,\r\n        address,\r\n        uint256 _configType\r\n    ) external view returns (bytes memory) {\r\n        return\r\n            endpoint.getConfig(\r\n                endpoint.getSendVersion(address(this)),\r\n                _chainId,\r\n                address(this),\r\n                _configType\r\n            );\r\n    }\r\n\r\n    function setSendVersion(uint16 version) external override {\r\n        endpoint.setSendVersion(version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 version) external override {\r\n        endpoint.setReceiveVersion(version);\r\n    }\r\n\r\n    function getSendVersion() external view returns (uint16) {\r\n        return endpoint.getSendVersion(address(this));\r\n    }\r\n\r\n    function getReceiveVersion() external view returns (uint16) {\r\n        return endpoint.getReceiveVersion(address(this));\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\r\n        external\r\n        override\r\n    {\r\n        //\r\n    }\r\n\r\n    // set the Oracle to be used by this UA for LayerZero messages\r\n    function setOracle(uint16 dstChainId, address oracle) external {\r\n        uint256 TYPE_ORACLE = 6; // from UltraLightNode\r\n        // set the Oracle\r\n        endpoint.setConfig(\r\n            endpoint.getSendVersion(address(this)),\r\n            dstChainId,\r\n            TYPE_ORACLE,\r\n            abi.encode(oracle)\r\n        );\r\n    }\r\n\r\n    // _chainId - the chainId for the remote contract\r\n    // _masterAddress - the contract address on the remote chainId\r\n    // the owner must set remote contract addresses.\r\n    // in lzReceive(), a require() ensures only messages\r\n    // from known contracts can be received.\r\n    function setRemote(uint16 _chainId, bytes calldata _masterAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            masterAddress.length == 0,\r\n            \"The remote address has already been set for the chainId!\"\r\n        );\r\n        masterChainId = _chainId;\r\n        masterAddress = _masterAddress;\r\n    }\r\n\r\n    // set the inbound block confirmations\r\n    function setInboundConfirmations(\r\n        uint16 _masterChainId,\r\n        uint16 _confirmations\r\n    ) external {\r\n        endpoint.setConfig(\r\n            endpoint.getSendVersion(address(this)),\r\n            _masterChainId,\r\n            2, // CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS\r\n            abi.encode(_confirmations)\r\n        );\r\n    }\r\n\r\n    // set outbound block confirmations\r\n    function setOutboundConfirmations(\r\n        uint16 _masterChainId,\r\n        uint16 _confirmations\r\n    ) external {\r\n        endpoint.setConfig(\r\n            endpoint.getSendVersion(address(this)),\r\n            _masterChainId,\r\n            5, // CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS\r\n            abi.encode(_confirmations)\r\n        );\r\n    }\r\n\r\n    // allow this contract to receive ether\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface ILayerZeroReceiver {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}"
    },
    "contracts/interfaces/IPOCDeployment.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPOCDeployment {\r\n    function updateCounter(\r\n        uint16 _chainId,\r\n        bytes memory _dstAddress,\r\n        int256 _amount,\r\n        string memory _method\r\n    ) external payable;\r\n\r\n    function sendCounter(\r\n        uint16 _dstChainId,\r\n        bytes memory _dstAddress,\r\n        uint16 _srcChainId\r\n    ) external payable;\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/MasterChain.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./interfaces/ILayerZeroReceiver.sol\";\r\nimport \"./interfaces/ILayerZeroEndpoint.sol\";\r\nimport \"./interfaces/ILayerZeroUserApplicationConfig.sol\";\r\nimport \"./interfaces/IPOCDeployment.sol\";\r\n\r\ncontract MasterChain is\r\n    Ownable,\r\n    ILayerZeroReceiver,\r\n    ILayerZeroUserApplicationConfig,\r\n    IPOCDeployment\r\n{\r\n    ILayerZeroEndpoint public endpoint;\r\n    mapping(uint16 => bytes) public remotes;\r\n    mapping(uint16 => int256) public counters;\r\n\r\n    constructor(address _endpoint) {\r\n        endpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function updateCounter(\r\n        uint16 _chainId,\r\n        bytes memory _dstAddress,\r\n        int256 _amount,\r\n        string memory _method\r\n    ) external payable override {\r\n        int256 amount;\r\n        bytes memory method = bytes(_method);\r\n        bytes memory expectAdd = bytes(\"ADD\");\r\n        bytes memory expectSub = bytes(\"SUB\");\r\n        bytes memory expectMul = bytes(\"MUL\");\r\n        if (\r\n            method.length == expectAdd.length &&\r\n            keccak256(method) == keccak256(expectAdd)\r\n        ) amount = counters[_chainId] + _amount;\r\n        else if (\r\n            method.length == expectSub.length &&\r\n            keccak256(method) == keccak256(expectSub)\r\n        ) amount = counters[_chainId] - _amount;\r\n        else if (\r\n            method.length == expectMul.length &&\r\n            keccak256(method) == keccak256(expectMul)\r\n        ) amount = counters[_chainId] * _amount;\r\n        else amount = counters[_chainId];\r\n\r\n        bytes memory _params = abi.encode(\"SET\", _chainId, amount);\r\n        endpoint.send{value: msg.value}(\r\n            _chainId,\r\n            _dstAddress,\r\n            _params,\r\n            payable(msg.sender),\r\n            address(0x0),\r\n            bytes(\"\")\r\n        );\r\n    }\r\n\r\n    function sendCounter(\r\n        uint16 _dstChainId,\r\n        bytes memory _dstAddress,\r\n        uint16 _srcChainId\r\n    ) public payable override {\r\n        bytes memory _params = abi.encode(\r\n            \"SET\",\r\n            _srcChainId,\r\n            counters[_srcChainId]\r\n        );\r\n        endpoint.send{value: msg.value}(\r\n            _dstChainId,\r\n            _dstAddress,\r\n            _params,\r\n            payable(msg.sender),\r\n            address(0x0),\r\n            bytes(\"\")\r\n        );\r\n    }\r\n\r\n    // overrides lzReceive function in ILayerZeroReceiver.\r\n    // automatically invoked on the receiving chain after the source chain calls endpoint.send(...)\r\n    function lzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64, /*_nonce*/\r\n        bytes memory _payload\r\n    ) external override {\r\n        require(msg.sender == address(endpoint));\r\n        require(\r\n            _srcAddress.length == remotes[_srcChainId].length &&\r\n                keccak256(_srcAddress) == keccak256(remotes[_srcChainId]),\r\n            \"Invalid remote sender address. owner should call setRemote() to enable remote contract\"\r\n        );\r\n        string memory method;\r\n        uint16 chainId;\r\n        bytes memory dstAddress;\r\n        int256 amount;\r\n        (method, chainId, dstAddress, amount) = abi.decode(\r\n            _payload,\r\n            (string, uint16, bytes, int256)\r\n        );\r\n\r\n        if (keccak256(bytes(method)) == keccak256(bytes(\"SET\"))) {\r\n            counters[_srcChainId] = amount;\r\n        } else {\r\n            sendCounter(_srcChainId, _srcAddress, chainId);\r\n        }\r\n    }\r\n\r\n    function setConfig(\r\n        uint16, /*_version*/\r\n        uint16 _chainId,\r\n        uint256 _configType,\r\n        bytes calldata _config\r\n    ) external override {\r\n        endpoint.setConfig(\r\n            endpoint.getSendVersion(address(this)),\r\n            _chainId,\r\n            _configType,\r\n            _config\r\n        );\r\n    }\r\n\r\n    function getConfig(\r\n        uint16, /*_dstChainId*/\r\n        uint16 _chainId,\r\n        address,\r\n        uint256 _configType\r\n    ) external view returns (bytes memory) {\r\n        return\r\n            endpoint.getConfig(\r\n                endpoint.getSendVersion(address(this)),\r\n                _chainId,\r\n                address(this),\r\n                _configType\r\n            );\r\n    }\r\n\r\n    function setSendVersion(uint16 version) external override {\r\n        endpoint.setSendVersion(version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 version) external override {\r\n        endpoint.setReceiveVersion(version);\r\n    }\r\n\r\n    function getSendVersion() external view returns (uint16) {\r\n        return endpoint.getSendVersion(address(this));\r\n    }\r\n\r\n    function getReceiveVersion() external view returns (uint16) {\r\n        return endpoint.getReceiveVersion(address(this));\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\r\n        external\r\n        override\r\n    {\r\n        //\r\n    }\r\n\r\n    // set the Oracle to be used by this UA for LayerZero messages\r\n    function setOracle(uint16 dstChainId, address oracle) external {\r\n        uint256 typeOracle = 6; // from UltraLightNode\r\n        // set the Oracle\r\n        endpoint.setConfig(\r\n            endpoint.getSendVersion(address(this)),\r\n            dstChainId,\r\n            typeOracle,\r\n            abi.encode(oracle)\r\n        );\r\n    }\r\n\r\n    // _chainId - the chainId for the remote contract\r\n    // _remoteAddress - the contract address on the remote chainId\r\n    // the owner must set remote contract addresses.\r\n    // in lzReceive(), a require() ensures only messages\r\n    // from known contracts can be received.\r\n    function setRemote(uint16 _chainId, bytes calldata _remoteAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            remotes[_chainId].length == 0,\r\n            \"The remote address has already been set for the chainId!\"\r\n        );\r\n        remotes[_chainId] = _remoteAddress;\r\n        counters[_chainId] = 0;\r\n    }\r\n\r\n    // set the inbound block confirmations\r\n    function setInboundConfirmations(uint16 remoteChainId, uint16 confirmations)\r\n        external\r\n    {\r\n        endpoint.setConfig(\r\n            endpoint.getSendVersion(address(this)),\r\n            remoteChainId,\r\n            2, // CONFIG_TYPE_INBOUND_BLOCK_CONFIRMATIONS\r\n            abi.encode(confirmations)\r\n        );\r\n    }\r\n\r\n    // set outbound block confirmations\r\n    function setOutboundConfirmations(\r\n        uint16 remoteChainId,\r\n        uint16 confirmations\r\n    ) external {\r\n        endpoint.setConfig(\r\n            endpoint.getSendVersion(address(this)),\r\n            remoteChainId,\r\n            5, // CONFIG_TYPE_OUTBOUND_BLOCK_CONFIRMATIONS\r\n            abi.encode(confirmations)\r\n        );\r\n    }\r\n\r\n    // allow this contract to receive ether\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/LZEndpointMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.4;\r\npragma abicoder v2;\r\n\r\nimport \"./interfaces/ILayerZeroReceiver.sol\";\r\nimport \"./interfaces/ILayerZeroEndpoint.sol\";\r\n\r\n/*\r\nmocking multi endpoint connection.\r\n- send() will short circuit to lzReceive() directly\r\n- no reentrancy guard. the real LayerZero endpoint on main net has a send and receive guard, respectively.\r\nif we run a ping-pong-like application, the recursive call might use all gas limit in the block.\r\n- not using any messaging library, hence all messaging library func, e.g. estimateFees, version, will not work\r\n*/\r\ncontract LZEndpointMock is ILayerZeroEndpoint {\r\n    mapping(address => address) public lzEndpointLookup;\r\n\r\n    uint16 public mockChainId;\r\n    address payable public mockOracle;\r\n    address payable public mockRelayer;\r\n    uint256 public mockBlockConfirmations;\r\n    uint16 public mockLibraryVersion;\r\n    uint256 public mockStaticNativeFee;\r\n    uint16 public mockLayerZeroVersion;\r\n    uint public nativeFee;\r\n    uint public zroFee;\r\n\r\n    // inboundNonce = [srcChainId][srcAddress].\r\n    mapping(uint16 => mapping(bytes => uint64)) public inboundNonce;\r\n    // outboundNonce = [dstChainId][srcAddress].\r\n    mapping(uint16 => mapping(address => uint64)) public outboundNonce;\r\n\r\n    constructor(uint16 _chainId) {\r\n        mockStaticNativeFee = 42;\r\n        mockLayerZeroVersion = 1;\r\n        mockChainId = _chainId;\r\n    }\r\n\r\n    // mock helper to set the value returned by `estimateNativeFees`\r\n    function setEstimatedFees(uint _nativeFee, uint _zroFee) public {\r\n        nativeFee = _nativeFee;\r\n        zroFee = _zroFee;\r\n    }\r\n\r\n    function getChainId() external view override returns (uint16) {\r\n        return mockChainId;\r\n    }\r\n\r\n    function setDestLzEndpoint(address destAddr, address lzEndpointAddr) external {\r\n        lzEndpointLookup[destAddr] = lzEndpointAddr;\r\n    }\r\n\r\n    function send(\r\n        uint16 _chainId,\r\n        bytes calldata _destination,\r\n        bytes calldata _payload,\r\n        address payable, /*_refundAddress*/\r\n        address, /*_zroPaymentAddress*/\r\n        bytes memory dstGas\r\n    ) external payable override {\r\n        address destAddr = packedBytesToAddr(_destination);\r\n        address lzEndpoint = lzEndpointLookup[destAddr];\r\n\r\n        require(lzEndpoint != address(0), \"LayerZeroMock: destination LayerZero Endpoint not found\");\r\n\r\n        uint64 nonce;\r\n        {\r\n            nonce = ++outboundNonce[_chainId][msg.sender];\r\n        }\r\n\r\n        // Mock the relayer paying the dstNativeAddr the amount of extra native token\r\n        {\r\n            uint256 dstNative;\r\n            address dstNativeAddr;\r\n            assembly {\r\n                dstNative := mload(add(dstGas, 66))\r\n                dstNativeAddr := mload(add(dstGas, 86))\r\n            }\r\n\r\n            if (dstNativeAddr == 0x90F79bf6EB2c4f870365E785982E1f101E93b906) {\r\n                require(dstNative == 453, \"Gas incorrect\");\r\n                require(1 != 1, \"NativeGasParams check\");\r\n            }\r\n        }\r\n\r\n        bytes memory bytesSourceUserApplicationAddr = addrToPackedBytes(address(msg.sender)); // cast this address to bytes\r\n\r\n        inboundNonce[_chainId][abi.encodePacked(msg.sender)] = nonce;\r\n        LZEndpointMock(lzEndpoint).receiveAndForward(destAddr, mockChainId, bytesSourceUserApplicationAddr, nonce, _payload);\r\n    }\r\n\r\n    function receiveAndForward(\r\n        address _destAddr,\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64 _nonce,\r\n        bytes memory _payload\r\n    ) external {\r\n        ILayerZeroReceiver(_destAddr).lzReceive(_srcChainId, _srcAddress, _nonce, _payload); // invoke lzReceive\r\n    }\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(\r\n        uint16,\r\n        address,\r\n        bytes memory,\r\n        bool,\r\n        bytes memory\r\n    ) external override view returns (uint _nativeFee, uint _zroFee){\r\n        _nativeFee = nativeFee;\r\n        _zroFee = zroFee;\r\n    }\r\n\r\n    // give 20 bytes, return the decoded address\r\n    function packedBytesToAddr(bytes calldata _b) public pure returns (address) {\r\n        address addr;\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, sub(_b.offset, 2), add(_b.length, 2))\r\n            addr := mload(sub(ptr, 10))\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    // given an address, return the 20 bytes\r\n    function addrToPackedBytes(address _a) public pure returns (bytes memory) {\r\n        bytes memory data = abi.encodePacked(_a);\r\n        return data;\r\n    }\r\n\r\n    function setConfig(uint16 /*_version*/, uint16 /*_chainId*/, uint /*_configType*/, bytes memory /*_config*/) override external  {\r\n    }\r\n    function getConfig(uint16 /*_version*/, uint16 /*_chainId*/, address /*_ua*/, uint /*_configType*/) override pure external returns(bytes memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external override {}\r\n\r\n    function setSendVersion(uint16 /*version*/) override  external {\r\n    }\r\n    function setReceiveVersion(uint16 /*version*/) override  external {\r\n    }\r\n    function getSendVersion(address /*_userApplication*/) override  external pure returns (uint16) {\r\n        return 1;\r\n    }\r\n    function getReceiveVersion(address /*_userApplication*/) override  external pure returns (uint16){\r\n        return 1;\r\n    }\r\n\r\n    function getInboundNonce(uint16 _chainID, bytes calldata _srcAddress) override external view returns (uint64) {\r\n        return inboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    function getOutboundNonce(uint16 _chainID, address _srcAddress) override external view returns (uint64) {\r\n        return outboundNonce[_chainID][_srcAddress];\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) override external {\r\n        // This mock does not implement the forceResumeReceive\r\n    }\r\n\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) override pure external {}\r\n\r\n    function hasStoredPayload(uint16, bytes memory) external pure override returns(bool) {\r\n        return true;\r\n    }\r\n\r\n    function isSendingPayload() external override pure returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function isReceivingPayload() external override pure  returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    function getSendLibraryAddress(address) external override view returns (address) {\r\n        return address(this);\r\n    }\r\n\r\n    function getReceiveLibraryAddress(address) external override view  returns (address) {\r\n        return address(this);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}